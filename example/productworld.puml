@startuml
!pragma useIntermediatePackages false
skinparam linetype ortho

class productworld.base.customer.Customer {
  customer_id: None
  name: None
  orders: list
  newestOrder: NewOrder
  Customer() -> None
  add_order(Order) -> None
  get_total_spent() -> int
}
annotation productworld.base.base.Methods {
  fancyFunc(Order) -> None
  funkyFunc() -> None
}
class productworld.base.base.Order {
  order_id: None
  product: Product
  quantity: None
  Order(Product) -> None
  calculate_total() -> int
}
class productworld.base.base.NewOrder {
  order_id: None
  product: Product
  quantity: None
  NewOrder(Product) -> None
  calculate_total(Product) -> int
}
abstract class productworld.base.base.Product {
  product_id: None
  name: None
  Product() -> None
  get_price() -> None
}
annotation productworld.products.products.Methods {
  create_product(str) -> PhysicalProduct | DigitalProduct
}
class productworld.products.products.Productfactory {
  create_product(str) -> PhysicalProduct | DigitalProduct
}
class productworld.products.products.DigitalProduct {
  price: None
  discount: None
  DigitalProduct() -> None
  get_price() -> int
}
class productworld.products.products.PhysicalProduct {
  price: None
  PhysicalProduct() -> None
  get_price() -> None
}
productworld.base.base.Order o-- productworld.base.base.Product
productworld.base.base.Methods --> productworld.base.base.Order: used by fancyFunc
productworld.base.base.NewOrder *-- productworld.base.base.Product
productworld.base.customer.Customer o-- productworld.base.base.NewOrder
productworld.products.products.PhysicalProduct --|> productworld.base.base.Product
productworld.products.products.DigitalProduct --|> productworld.base.base.Product
productworld.products.products.Methods --> productworld.products.products.PhysicalProduct: used by create_product
productworld.products.products.Methods --> productworld.products.products.DigitalProduct: used by create_product
productworld.base.customer.Customer --> productworld.base.base.Order: used by add_order
productworld.base.customer.Customer --> productworld.base.base.Methods: used by add_order use of fancyFunc
productworld.products.products.DigitalProduct --> productworld.base.base.Methods: used by __init__ use of funkyFunc
productworld.products.products.Productfactory --> productworld.products.products.PhysicalProduct: used by create_product
productworld.products.products.Productfactory --> productworld.products.products.DigitalProduct: used by create_product
footer Generated by //CodebaseGraph//
@enduml